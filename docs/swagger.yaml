basePath: /
definitions:
  entity.Conversion:
    properties:
      amount:
        type: number
      from:
        example: usd
        type: string
      to:
        example: bitcoin
        type: string
    type: object
  entity.Credentials:
    properties:
      login:
        example: user
        type: string
      password:
        example: pass
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server for cryptocurrency with login and registration
  termsOfService: http://swagger.io/terms/
  title: Crypto-Project API
  version: "1.0"
paths:
  /api/convert:
    post:
      consumes:
      - application/json
      description: verify token and convert amount
      parameters:
      - description: jwt token for authentification
        in: header
        name: token
        required: true
        type: string
      - description: amount, from, to
        in: body
        name: conversion
        required: true
        schema:
          $ref: '#/definitions/entity.Conversion'
      produces:
      - application/json
      responses:
        "200":
          description: convert is successful
          schema:
            type: string
        "401":
          description: Authorization token not provided or Invalid token
          schema:
            type: string
        "403":
          description: Token has expired
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: convert page
      tags:
      - API
  /api/get:
    get:
      consumes:
      - application/json
      description: verify token and get currencies
      parameters:
      - description: jwt token for authentification
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get currencies is successful
          schema:
            type: string
        "401":
          description: Authorization token not provided or Invalid token
          schema:
            type: string
        "403":
          description: Token has expired
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: get page
      tags:
      - API
  /api/history:
    get:
      consumes:
      - application/json
      description: verify token and get history
      parameters:
      - description: jwt token for authentification
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get history is successful
          schema:
            type: string
        "401":
          description: Authorization token not provided or Invalid token
          schema:
            type: string
        "403":
          description: Token has expired
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: history page
      tags:
      - API
  /home:
    get:
      description: home page
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Home page
  /info:
    get:
      description: information about register and login
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Info page
  /login:
    post:
      consumes:
      - application/json
      description: login by json user with login, password
      parameters:
      - description: Login and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            type: string
        "400":
          description: login is impossible
          schema:
            type: string
        "500":
          description: login error
          schema:
            type: string
      summary: login page
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: register by json user with login, password
      parameters:
      - description: login and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.Credentials'
      produces:
      - application/json
      responses:
        "201":
          description: registration successful
          schema:
            type: string
        "400":
          description: registration is impossible
          schema:
            type: string
        "500":
          description: registration error
          schema:
            type: string
      summary: registration page
      tags:
      - users
swagger: "2.0"
